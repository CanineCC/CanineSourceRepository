/* tslint:disable */
/* eslint-disable */
/**
 * BpnEngine API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddNamedConfigurationBody,
  NamedConfiguration,
  RemoveNamedConfigurationBody,
  UpdateNamedConfigurationBody,
} from '../models/index';
import {
    AddNamedConfigurationBodyFromJSON,
    AddNamedConfigurationBodyToJSON,
    NamedConfigurationFromJSON,
    NamedConfigurationToJSON,
    RemoveNamedConfigurationBodyFromJSON,
    RemoveNamedConfigurationBodyToJSON,
    UpdateNamedConfigurationBodyFromJSON,
    UpdateNamedConfigurationBodyToJSON,
} from '../models/index';

export interface AddNamedConfigurationRequest {
    addNamedConfigurationBody: AddNamedConfigurationBody;
}

export interface RemoveNamedConfigurationRequest {
    removeNamedConfigurationBody: RemoveNamedConfigurationBody;
}

export interface UpdateNamedConfigurationRequest {
    updateNamedConfigurationBody: UpdateNamedConfigurationBody;
}

/**
 * 
 */
export class NamedConfigurationApi extends runtime.BaseAPI {

    /**
     */
    async addNamedConfigurationRaw(requestParameters: AddNamedConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addNamedConfigurationBody'] == null) {
            throw new runtime.RequiredError(
                'addNamedConfigurationBody',
                'Required parameter "addNamedConfigurationBody" was null or undefined when calling addNamedConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/NamedConfiguration/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddNamedConfigurationBodyToJSON(requestParameters['addNamedConfigurationBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addNamedConfiguration(requestParameters: AddNamedConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addNamedConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllNamedConfigurationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NamedConfiguration>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/NamedConfiguration/All`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NamedConfigurationFromJSON));
    }

    /**
     */
    async getAllNamedConfigurations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NamedConfiguration>> {
        const response = await this.getAllNamedConfigurationsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeNamedConfigurationRaw(requestParameters: RemoveNamedConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['removeNamedConfigurationBody'] == null) {
            throw new runtime.RequiredError(
                'removeNamedConfigurationBody',
                'Required parameter "removeNamedConfigurationBody" was null or undefined when calling removeNamedConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/NamedConfiguration/Remove`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveNamedConfigurationBodyToJSON(requestParameters['removeNamedConfigurationBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeNamedConfiguration(requestParameters: RemoveNamedConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeNamedConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateNamedConfigurationRaw(requestParameters: UpdateNamedConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateNamedConfigurationBody'] == null) {
            throw new runtime.RequiredError(
                'updateNamedConfigurationBody',
                'Required parameter "updateNamedConfigurationBody" was null or undefined when calling updateNamedConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/NamedConfiguration/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNamedConfigurationBodyToJSON(requestParameters['updateNamedConfigurationBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateNamedConfiguration(requestParameters: UpdateNamedConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateNamedConfigurationRaw(requestParameters, initOverrides);
    }

}
