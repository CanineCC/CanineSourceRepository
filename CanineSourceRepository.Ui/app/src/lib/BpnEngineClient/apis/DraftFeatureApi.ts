/* tslint:disable */
/* eslint-disable */
/**
 * BpnEngine API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddDraftFeatureBody,
  AddTaskToDraftFeatureBody,
  AddTransitionToDraftFeatureBody,
  BpnDraftFeature,
  BpnTask,
  CodeSnippet,
  CompileError,
  ReleaseFeatureBody,
  ResetDraftFeatureBody,
  UpdateDraftFeaturePurposeBody,
} from '../models/index';
import {
    AddDraftFeatureBodyFromJSON,
    AddDraftFeatureBodyToJSON,
    AddTaskToDraftFeatureBodyFromJSON,
    AddTaskToDraftFeatureBodyToJSON,
    AddTransitionToDraftFeatureBodyFromJSON,
    AddTransitionToDraftFeatureBodyToJSON,
    BpnDraftFeatureFromJSON,
    BpnDraftFeatureToJSON,
    BpnTaskFromJSON,
    BpnTaskToJSON,
    CodeSnippetFromJSON,
    CodeSnippetToJSON,
    CompileErrorFromJSON,
    CompileErrorToJSON,
    ReleaseFeatureBodyFromJSON,
    ReleaseFeatureBodyToJSON,
    ResetDraftFeatureBodyFromJSON,
    ResetDraftFeatureBodyToJSON,
    UpdateDraftFeaturePurposeBodyFromJSON,
    UpdateDraftFeaturePurposeBodyToJSON,
} from '../models/index';

export interface AddDraftFeatureRequest {
    addDraftFeatureBody: AddDraftFeatureBody;
}

export interface AddTaskToDraftFeatureRequest {
    addTaskToDraftFeatureBody: AddTaskToDraftFeatureBody;
}

export interface AddTransitionToDraftFeatureRequest {
    addTransitionToDraftFeatureBody: AddTransitionToDraftFeatureBody;
}

export interface GetDraftFeatureRequest {
    featureId: string;
}

export interface GetSnippetsForCodeBlockRequest {
    bpnTask: BpnTask;
}

export interface ReleaseFeatureRequest {
    releaseFeatureBody: ReleaseFeatureBody;
}

export interface RemoveTaskFromDraftFeatureRequest {
    featureId: string;
    task: string;
}

export interface RemoveTransitionFromDraftFeatureRequest {
    featureId: string;
    fromBpn: string;
    toBpn: string;
}

export interface ResetDraftFeatureRequest {
    resetDraftFeatureBody: ResetDraftFeatureBody;
}

export interface UpdateDraftFeaturePurposeRequest {
    updateDraftFeaturePurposeBody: UpdateDraftFeaturePurposeBody;
}

export interface VerifyCodeBlockRequest {
    bpnTask: BpnTask;
}

/**
 * 
 */
export class DraftFeatureApi extends runtime.BaseAPI {

    /**
     */
    async addDraftFeatureRaw(requestParameters: AddDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addDraftFeatureBody'] == null) {
            throw new runtime.RequiredError(
                'addDraftFeatureBody',
                'Required parameter "addDraftFeatureBody" was null or undefined when calling addDraftFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDraftFeatureBodyToJSON(requestParameters['addDraftFeatureBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addDraftFeature(requestParameters: AddDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addDraftFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addTaskToDraftFeatureRaw(requestParameters: AddTaskToDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addTaskToDraftFeatureBody'] == null) {
            throw new runtime.RequiredError(
                'addTaskToDraftFeatureBody',
                'Required parameter "addTaskToDraftFeatureBody" was null or undefined when calling addTaskToDraftFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/AddTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTaskToDraftFeatureBodyToJSON(requestParameters['addTaskToDraftFeatureBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addTaskToDraftFeature(requestParameters: AddTaskToDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addTaskToDraftFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addTransitionToDraftFeatureRaw(requestParameters: AddTransitionToDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addTransitionToDraftFeatureBody'] == null) {
            throw new runtime.RequiredError(
                'addTransitionToDraftFeatureBody',
                'Required parameter "addTransitionToDraftFeatureBody" was null or undefined when calling addTransitionToDraftFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/AddTransition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTransitionToDraftFeatureBodyToJSON(requestParameters['addTransitionToDraftFeatureBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addTransitionToDraftFeature(requestParameters: AddTransitionToDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addTransitionToDraftFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getDraftFeatureRaw(requestParameters: GetDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BpnDraftFeature>> {
        if (requestParameters['featureId'] == null) {
            throw new runtime.RequiredError(
                'featureId',
                'Required parameter "featureId" was null or undefined when calling getDraftFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/{featureId}`.replace(`{${"featureId"}}`, encodeURIComponent(String(requestParameters['featureId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BpnDraftFeatureFromJSON(jsonValue));
    }

    /**
     */
    async getDraftFeature(requestParameters: GetDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BpnDraftFeature> {
        const response = await this.getDraftFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSnippetsForCodeBlockRaw(requestParameters: GetSnippetsForCodeBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CodeSnippet>>> {
        if (requestParameters['bpnTask'] == null) {
            throw new runtime.RequiredError(
                'bpnTask',
                'Required parameter "bpnTask" was null or undefined when calling getSnippetsForCodeBlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/Task/GetSnippetsForCodeBlock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BpnTaskToJSON(requestParameters['bpnTask']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CodeSnippetFromJSON));
    }

    /**
     */
    async getSnippetsForCodeBlock(requestParameters: GetSnippetsForCodeBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CodeSnippet>> {
        const response = await this.getSnippetsForCodeBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async releaseFeatureRaw(requestParameters: ReleaseFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['releaseFeatureBody'] == null) {
            throw new runtime.RequiredError(
                'releaseFeatureBody',
                'Required parameter "releaseFeatureBody" was null or undefined when calling releaseFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/Release`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReleaseFeatureBodyToJSON(requestParameters['releaseFeatureBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async releaseFeature(requestParameters: ReleaseFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.releaseFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeTaskFromDraftFeatureRaw(requestParameters: RemoveTaskFromDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['featureId'] == null) {
            throw new runtime.RequiredError(
                'featureId',
                'Required parameter "featureId" was null or undefined when calling removeTaskFromDraftFeature().'
            );
        }

        if (requestParameters['task'] == null) {
            throw new runtime.RequiredError(
                'task',
                'Required parameter "task" was null or undefined when calling removeTaskFromDraftFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/RemoveTask/{featureId}/{task}`.replace(`{${"featureId"}}`, encodeURIComponent(String(requestParameters['featureId']))).replace(`{${"task"}}`, encodeURIComponent(String(requestParameters['task']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeTaskFromDraftFeature(requestParameters: RemoveTaskFromDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTaskFromDraftFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeTransitionFromDraftFeatureRaw(requestParameters: RemoveTransitionFromDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['featureId'] == null) {
            throw new runtime.RequiredError(
                'featureId',
                'Required parameter "featureId" was null or undefined when calling removeTransitionFromDraftFeature().'
            );
        }

        if (requestParameters['fromBpn'] == null) {
            throw new runtime.RequiredError(
                'fromBpn',
                'Required parameter "fromBpn" was null or undefined when calling removeTransitionFromDraftFeature().'
            );
        }

        if (requestParameters['toBpn'] == null) {
            throw new runtime.RequiredError(
                'toBpn',
                'Required parameter "toBpn" was null or undefined when calling removeTransitionFromDraftFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/RemoveTransition/{featureId}/{fromBpn}/{toBpn}`.replace(`{${"featureId"}}`, encodeURIComponent(String(requestParameters['featureId']))).replace(`{${"fromBpn"}}`, encodeURIComponent(String(requestParameters['fromBpn']))).replace(`{${"toBpn"}}`, encodeURIComponent(String(requestParameters['toBpn']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeTransitionFromDraftFeature(requestParameters: RemoveTransitionFromDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTransitionFromDraftFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async resetDraftFeatureRaw(requestParameters: ResetDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetDraftFeatureBody'] == null) {
            throw new runtime.RequiredError(
                'resetDraftFeatureBody',
                'Required parameter "resetDraftFeatureBody" was null or undefined when calling resetDraftFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/Reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetDraftFeatureBodyToJSON(requestParameters['resetDraftFeatureBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resetDraftFeature(requestParameters: ResetDraftFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetDraftFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateDraftFeaturePurposeRaw(requestParameters: UpdateDraftFeaturePurposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateDraftFeaturePurposeBody'] == null) {
            throw new runtime.RequiredError(
                'updateDraftFeaturePurposeBody',
                'Required parameter "updateDraftFeaturePurposeBody" was null or undefined when calling updateDraftFeaturePurpose().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/UpdatePurpose`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDraftFeaturePurposeBodyToJSON(requestParameters['updateDraftFeaturePurposeBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateDraftFeaturePurpose(requestParameters: UpdateDraftFeaturePurposeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateDraftFeaturePurposeRaw(requestParameters, initOverrides);
    }

    /**
     */
    async verifyCodeBlockRaw(requestParameters: VerifyCodeBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bpnTask'] == null) {
            throw new runtime.RequiredError(
                'bpnTask',
                'Required parameter "bpnTask" was null or undefined when calling verifyCodeBlock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/Task/VerifyCodeBlock`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BpnTaskToJSON(requestParameters['bpnTask']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async verifyCodeBlock(requestParameters: VerifyCodeBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.verifyCodeBlockRaw(requestParameters, initOverrides);
    }

}
