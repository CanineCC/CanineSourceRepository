/* tslint:disable */
/* eslint-disable */
/**
 * BpnEngine API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPersonaBody,
  BpnWebApiContainer,
  CreateContainerBody,
  RemovePersonaBody,
} from '../models/index';
import {
    AddPersonaBodyFromJSON,
    AddPersonaBodyToJSON,
    BpnWebApiContainerFromJSON,
    BpnWebApiContainerToJSON,
    CreateContainerBodyFromJSON,
    CreateContainerBodyToJSON,
    RemovePersonaBodyFromJSON,
    RemovePersonaBodyToJSON,
} from '../models/index';

export interface AddPersonaRequest {
    addPersonaBody: AddPersonaBody;
}

export interface CreateContainerRequest {
    createContainerBody: CreateContainerBody;
}

export interface GetAllContainersBySystemRequest {
    systemId: string;
}

export interface RemovePersonaRequest {
    removePersonaBody: RemovePersonaBody;
}

/**
 * 
 */
export class ContainerApi extends runtime.BaseAPI {

    /**
     */
    async addPersonaRaw(requestParameters: AddPersonaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addPersonaBody'] == null) {
            throw new runtime.RequiredError(
                'addPersonaBody',
                'Required parameter "addPersonaBody" was null or undefined when calling addPersona().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/Container/AddPersona`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPersonaBodyToJSON(requestParameters['addPersonaBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addPersona(requestParameters: AddPersonaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPersonaRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createContainerRaw(requestParameters: CreateContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createContainerBody'] == null) {
            throw new runtime.RequiredError(
                'createContainerBody',
                'Required parameter "createContainerBody" was null or undefined when calling createContainer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/Container/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContainerBodyToJSON(requestParameters['createContainerBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createContainer(requestParameters: CreateContainerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createContainerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllContainersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BpnWebApiContainer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/Container/All`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BpnWebApiContainerFromJSON));
    }

    /**
     */
    async getAllContainers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BpnWebApiContainer>> {
        const response = await this.getAllContainersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllContainersBySystemRaw(requestParameters: GetAllContainersBySystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BpnWebApiContainer>>> {
        if (requestParameters['systemId'] == null) {
            throw new runtime.RequiredError(
                'systemId',
                'Required parameter "systemId" was null or undefined when calling getAllContainersBySystem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/Container/BySystem/{systemId}`.replace(`{${"systemId"}}`, encodeURIComponent(String(requestParameters['systemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BpnWebApiContainerFromJSON));
    }

    /**
     */
    async getAllContainersBySystem(requestParameters: GetAllContainersBySystemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BpnWebApiContainer>> {
        const response = await this.getAllContainersBySystemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removePersonaRaw(requestParameters: RemovePersonaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['removePersonaBody'] == null) {
            throw new runtime.RequiredError(
                'removePersonaBody',
                'Required parameter "removePersonaBody" was null or undefined when calling removePersona().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/Container/RemovePersona`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemovePersonaBodyToJSON(requestParameters['removePersonaBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removePersona(requestParameters: RemovePersonaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePersonaRaw(requestParameters, initOverrides);
    }

}
