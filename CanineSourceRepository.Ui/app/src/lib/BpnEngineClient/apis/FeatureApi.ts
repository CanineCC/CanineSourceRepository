/* tslint:disable */
/* eslint-disable */
/**
 * BpnEngine API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BpnFeatureVersion,
  BpnFeatureVersionStat,
  UpdateEnvironmentsOnFeatureBody,
} from '../models/index';
import {
    BpnFeatureVersionFromJSON,
    BpnFeatureVersionToJSON,
    BpnFeatureVersionStatFromJSON,
    BpnFeatureVersionStatToJSON,
    UpdateEnvironmentsOnFeatureBodyFromJSON,
    UpdateEnvironmentsOnFeatureBodyToJSON,
} from '../models/index';

export interface GetFeatureVersionRequest {
    featureId: string;
    version: number;
}

export interface GetFeatureVersionStatsRequest {
    featureId: string;
    version: number;
}

export interface UpdateEnvironmentsOnFeatureRequest {
    updateEnvironmentsOnFeatureBody: UpdateEnvironmentsOnFeatureBody;
}

/**
 * 
 */
export class FeatureApi extends runtime.BaseAPI {

    /**
     */
    async getFeatureVersionRaw(requestParameters: GetFeatureVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BpnFeatureVersion>> {
        if (requestParameters['featureId'] == null) {
            throw new runtime.RequiredError(
                'featureId',
                'Required parameter "featureId" was null or undefined when calling getFeatureVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling getFeatureVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/Feature/{featureId}/{version}`.replace(`{${"featureId"}}`, encodeURIComponent(String(requestParameters['featureId']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BpnFeatureVersionFromJSON(jsonValue));
    }

    /**
     */
    async getFeatureVersion(requestParameters: GetFeatureVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BpnFeatureVersion> {
        const response = await this.getFeatureVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeatureVersionStatsRaw(requestParameters: GetFeatureVersionStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BpnFeatureVersionStat>> {
        if (requestParameters['featureId'] == null) {
            throw new runtime.RequiredError(
                'featureId',
                'Required parameter "featureId" was null or undefined when calling getFeatureVersionStats().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling getFeatureVersionStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/BpnEngine/v1/Feature/Stats/{featureId}/{version}`.replace(`{${"featureId"}}`, encodeURIComponent(String(requestParameters['featureId']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BpnFeatureVersionStatFromJSON(jsonValue));
    }

    /**
     */
    async getFeatureVersionStats(requestParameters: GetFeatureVersionStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BpnFeatureVersionStat> {
        const response = await this.getFeatureVersionStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateEnvironmentsOnFeatureRaw(requestParameters: UpdateEnvironmentsOnFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateEnvironmentsOnFeatureBody'] == null) {
            throw new runtime.RequiredError(
                'updateEnvironmentsOnFeatureBody',
                'Required parameter "updateEnvironmentsOnFeatureBody" was null or undefined when calling updateEnvironmentsOnFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/Feature/UpdateEnvironment`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEnvironmentsOnFeatureBodyToJSON(requestParameters['updateEnvironmentsOnFeatureBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateEnvironmentsOnFeature(requestParameters: UpdateEnvironmentsOnFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateEnvironmentsOnFeatureRaw(requestParameters, initOverrides);
    }

}
