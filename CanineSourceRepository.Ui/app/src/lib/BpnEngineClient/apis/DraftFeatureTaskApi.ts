/* tslint:disable */
/* eslint-disable */
/**
 * BpnEngine API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAssertionToTaskBody,
  AddRecordToTaskBody,
  DeleteAssertionOnTask,
  DeleteRecordOnTaskBody,
  UpdateAssertionOnTaskBody,
  UpdateCodeOnTaskBody,
  UpdateRecordOnTaskBody,
  UpdateServiceDependencyBody,
  UpdateTaskPurposeFeatureBody,
} from '../models/index';
import {
    AddAssertionToTaskBodyFromJSON,
    AddAssertionToTaskBodyToJSON,
    AddRecordToTaskBodyFromJSON,
    AddRecordToTaskBodyToJSON,
    DeleteAssertionOnTaskFromJSON,
    DeleteAssertionOnTaskToJSON,
    DeleteRecordOnTaskBodyFromJSON,
    DeleteRecordOnTaskBodyToJSON,
    UpdateAssertionOnTaskBodyFromJSON,
    UpdateAssertionOnTaskBodyToJSON,
    UpdateCodeOnTaskBodyFromJSON,
    UpdateCodeOnTaskBodyToJSON,
    UpdateRecordOnTaskBodyFromJSON,
    UpdateRecordOnTaskBodyToJSON,
    UpdateServiceDependencyBodyFromJSON,
    UpdateServiceDependencyBodyToJSON,
    UpdateTaskPurposeFeatureBodyFromJSON,
    UpdateTaskPurposeFeatureBodyToJSON,
} from '../models/index';

export interface AddAssertionRequest {
    addAssertionToTaskBody: AddAssertionToTaskBody;
}

export interface AddRecordToTaskFeatureRequest {
    addRecordToTaskBody: AddRecordToTaskBody;
}

export interface DeleteAssertionRequest {
    deleteAssertionOnTask: DeleteAssertionOnTask;
}

export interface DeleteRecordOnTaskFeatureRequest {
    deleteRecordOnTaskBody: DeleteRecordOnTaskBody;
}

export interface UpdateAssertionRequest {
    updateAssertionOnTaskBody: UpdateAssertionOnTaskBody;
}

export interface UpdateCodeOnTaskFeatureRequest {
    updateCodeOnTaskBody: UpdateCodeOnTaskBody;
}

export interface UpdateRecordOnTaskFeatureRequest {
    updateRecordOnTaskBody: UpdateRecordOnTaskBody;
}

export interface UpdateServiceDependencyFeatureRequest {
    updateServiceDependencyBody: UpdateServiceDependencyBody;
}

export interface UpdateTaskPurposeFeatureRequest {
    updateTaskPurposeFeatureBody: UpdateTaskPurposeFeatureBody;
}

/**
 * 
 */
export class DraftFeatureTaskApi extends runtime.BaseAPI {

    /**
     */
    async addAssertionRaw(requestParameters: AddAssertionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addAssertionToTaskBody'] == null) {
            throw new runtime.RequiredError(
                'addAssertionToTaskBody',
                'Required parameter "addAssertionToTaskBody" was null or undefined when calling addAssertion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/AddAssertion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAssertionToTaskBodyToJSON(requestParameters['addAssertionToTaskBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addAssertion(requestParameters: AddAssertionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAssertionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addRecordToTaskFeatureRaw(requestParameters: AddRecordToTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addRecordToTaskBody'] == null) {
            throw new runtime.RequiredError(
                'addRecordToTaskBody',
                'Required parameter "addRecordToTaskBody" was null or undefined when calling addRecordToTaskFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/AddRecordToTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddRecordToTaskBodyToJSON(requestParameters['addRecordToTaskBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addRecordToTaskFeature(requestParameters: AddRecordToTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addRecordToTaskFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteAssertionRaw(requestParameters: DeleteAssertionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deleteAssertionOnTask'] == null) {
            throw new runtime.RequiredError(
                'deleteAssertionOnTask',
                'Required parameter "deleteAssertionOnTask" was null or undefined when calling deleteAssertion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/DeleteAssertion`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAssertionOnTaskToJSON(requestParameters['deleteAssertionOnTask']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAssertion(requestParameters: DeleteAssertionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAssertionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteRecordOnTaskFeatureRaw(requestParameters: DeleteRecordOnTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deleteRecordOnTaskBody'] == null) {
            throw new runtime.RequiredError(
                'deleteRecordOnTaskBody',
                'Required parameter "deleteRecordOnTaskBody" was null or undefined when calling deleteRecordOnTaskFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/DeleteRecordOnTask`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRecordOnTaskBodyToJSON(requestParameters['deleteRecordOnTaskBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecordOnTaskFeature(requestParameters: DeleteRecordOnTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecordOnTaskFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateAssertionRaw(requestParameters: UpdateAssertionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateAssertionOnTaskBody'] == null) {
            throw new runtime.RequiredError(
                'updateAssertionOnTaskBody',
                'Required parameter "updateAssertionOnTaskBody" was null or undefined when calling updateAssertion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/UpdateAssertion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssertionOnTaskBodyToJSON(requestParameters['updateAssertionOnTaskBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateAssertion(requestParameters: UpdateAssertionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateAssertionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateCodeOnTaskFeatureRaw(requestParameters: UpdateCodeOnTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateCodeOnTaskBody'] == null) {
            throw new runtime.RequiredError(
                'updateCodeOnTaskBody',
                'Required parameter "updateCodeOnTaskBody" was null or undefined when calling updateCodeOnTaskFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/UpdateCodeOnTask`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCodeOnTaskBodyToJSON(requestParameters['updateCodeOnTaskBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCodeOnTaskFeature(requestParameters: UpdateCodeOnTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCodeOnTaskFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateRecordOnTaskFeatureRaw(requestParameters: UpdateRecordOnTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateRecordOnTaskBody'] == null) {
            throw new runtime.RequiredError(
                'updateRecordOnTaskBody',
                'Required parameter "updateRecordOnTaskBody" was null or undefined when calling updateRecordOnTaskFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/UpdateRecordOnTask`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRecordOnTaskBodyToJSON(requestParameters['updateRecordOnTaskBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateRecordOnTaskFeature(requestParameters: UpdateRecordOnTaskFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateRecordOnTaskFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateServiceDependencyFeatureRaw(requestParameters: UpdateServiceDependencyFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateServiceDependencyBody'] == null) {
            throw new runtime.RequiredError(
                'updateServiceDependencyBody',
                'Required parameter "updateServiceDependencyBody" was null or undefined when calling updateServiceDependencyFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/UpdateServiceDependency`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateServiceDependencyBodyToJSON(requestParameters['updateServiceDependencyBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateServiceDependencyFeature(requestParameters: UpdateServiceDependencyFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateServiceDependencyFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateTaskPurposeFeatureRaw(requestParameters: UpdateTaskPurposeFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateTaskPurposeFeatureBody'] == null) {
            throw new runtime.RequiredError(
                'updateTaskPurposeFeatureBody',
                'Required parameter "updateTaskPurposeFeatureBody" was null or undefined when calling updateTaskPurposeFeature().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/BpnEngine/v1/DraftFeature/UpdateTaskPurposeFeature`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskPurposeFeatureBodyToJSON(requestParameters['updateTaskPurposeFeatureBody']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateTaskPurposeFeature(requestParameters: UpdateTaskPurposeFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTaskPurposeFeatureRaw(requestParameters, initOverrides);
    }

}
