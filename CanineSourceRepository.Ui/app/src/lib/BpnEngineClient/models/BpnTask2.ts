/* tslint:disable */
/* eslint-disable */
/**
 * BpnEngine API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TestCase } from './TestCase';
import {
    TestCaseFromJSON,
    TestCaseFromJSONTyped,
    TestCaseToJSON,
} from './TestCase';
import type { RecordDefinition } from './RecordDefinition';
import {
    RecordDefinitionFromJSON,
    RecordDefinitionFromJSONTyped,
    RecordDefinitionToJSON,
} from './RecordDefinition';

/**
 * 
 * @export
 * @interface BpnTask2
 */
export interface BpnTask2 {
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    businessPurpose: string;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    behavioralGoal: string;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    input?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    output?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    code: string;
    /**
     * 
     * @type {Array<TestCase>}
     * @memberof BpnTask2
     */
    testCases: Array<TestCase>;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    serviceDependency: string;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    namedConfiguration: string;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    serviceDependencyId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    namedConfigurationId?: string | null;
    /**
     * 
     * @type {Array<RecordDefinition>}
     * @memberof BpnTask2
     */
    recordTypes: Array<RecordDefinition>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BpnTask2
     */
    validDatatypes: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    recordsAsCode?: string;
    /**
     * 
     * @type {string}
     * @memberof BpnTask2
     */
    methodSignatureAsCode?: string;
}

/**
 * Check if a given object implements the BpnTask2 interface.
 */
export function instanceOfBpnTask2(value: object): value is BpnTask2 {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('businessPurpose' in value) || value['businessPurpose'] === undefined) return false;
    if (!('behavioralGoal' in value) || value['behavioralGoal'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('testCases' in value) || value['testCases'] === undefined) return false;
    if (!('serviceDependency' in value) || value['serviceDependency'] === undefined) return false;
    if (!('namedConfiguration' in value) || value['namedConfiguration'] === undefined) return false;
    if (!('recordTypes' in value) || value['recordTypes'] === undefined) return false;
    if (!('validDatatypes' in value) || value['validDatatypes'] === undefined) return false;
    return true;
}

export function BpnTask2FromJSON(json: any): BpnTask2 {
    return BpnTask2FromJSONTyped(json, false);
}

export function BpnTask2FromJSONTyped(json: any, ignoreDiscriminator: boolean): BpnTask2 {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'],
        'businessPurpose': json['businessPurpose'],
        'behavioralGoal': json['behavioralGoal'],
        'input': json['input'] == null ? undefined : json['input'],
        'output': json['output'] == null ? undefined : json['output'],
        'code': json['code'],
        'testCases': ((json['testCases'] as Array<any>).map(TestCaseFromJSON)),
        'serviceDependency': json['serviceDependency'],
        'namedConfiguration': json['namedConfiguration'],
        'serviceDependencyId': json['serviceDependencyId'] == null ? undefined : json['serviceDependencyId'],
        'namedConfigurationId': json['namedConfigurationId'] == null ? undefined : json['namedConfigurationId'],
        'recordTypes': ((json['recordTypes'] as Array<any>).map(RecordDefinitionFromJSON)),
        'validDatatypes': json['validDatatypes'],
        'recordsAsCode': json['recordsAsCode'] == null ? undefined : json['recordsAsCode'],
        'methodSignatureAsCode': json['methodSignatureAsCode'] == null ? undefined : json['methodSignatureAsCode'],
    };
}

export function BpnTask2ToJSON(value?: BpnTask2 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'businessPurpose': value['businessPurpose'],
        'behavioralGoal': value['behavioralGoal'],
        'input': value['input'],
        'output': value['output'],
        'code': value['code'],
        'testCases': ((value['testCases'] as Array<any>).map(TestCaseToJSON)),
        'serviceDependency': value['serviceDependency'],
        'namedConfiguration': value['namedConfiguration'],
        'serviceDependencyId': value['serviceDependencyId'],
        'namedConfigurationId': value['namedConfigurationId'],
        'recordTypes': ((value['recordTypes'] as Array<any>).map(RecordDefinitionToJSON)),
        'validDatatypes': value['validDatatypes'],
        'recordsAsCode': value['recordsAsCode'],
        'methodSignatureAsCode': value['methodSignatureAsCode'],
    };
}

