/* tslint:disable */
/* eslint-disable */
/**
 * BpnEngine API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Environment } from './Environment';
import {
    EnvironmentFromJSON,
    EnvironmentFromJSONTyped,
    EnvironmentToJSON,
} from './Environment';
import type { FeatureStats } from './FeatureStats';
import {
    FeatureStatsFromJSON,
    FeatureStatsFromJSONTyped,
    FeatureStatsToJSON,
} from './FeatureStats';

/**
 * 
 * @export
 * @interface FeatureVersion
 */
export interface FeatureVersion {
    /**
     * 
     * @type {string}
     * @memberof FeatureVersion
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof FeatureVersion
     */
    version: number;
    /**
     * 
     * @type {Array<Environment>}
     * @memberof FeatureVersion
     */
    environments: Array<Environment>;
    /**
     * 
     * @type {FeatureStats}
     * @memberof FeatureVersion
     */
    stats: FeatureStats;
}

/**
 * Check if a given object implements the FeatureVersion interface.
 */
export function instanceOfFeatureVersion(value: object): value is FeatureVersion {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('environments' in value) || value['environments'] === undefined) return false;
    if (!('stats' in value) || value['stats'] === undefined) return false;
    return true;
}

export function FeatureVersionFromJSON(json: any): FeatureVersion {
    return FeatureVersionFromJSONTyped(json, false);
}

export function FeatureVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureVersion {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'version': json['version'],
        'environments': ((json['environments'] as Array<any>).map(EnvironmentFromJSON)),
        'stats': FeatureStatsFromJSON(json['stats']),
    };
}

export function FeatureVersionToJSON(value?: FeatureVersion | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'version': value['version'],
        'environments': ((value['environments'] as Array<any>).map(EnvironmentToJSON)),
        'stats': FeatureStatsToJSON(value['stats']),
    };
}

